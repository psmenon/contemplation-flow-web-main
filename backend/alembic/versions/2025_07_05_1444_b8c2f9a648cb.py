"""init

Revision ID: b8c2f9a648cb
Revises:
Create Date: 2025-07-05 14:44:21.174683

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector


# revision identifiers, used by Alembic.
revision: str = "b8c2f9a648cb"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "otp_sessions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.Column("otpless_request_id", sa.String(), nullable=False),
        sa.Column(
            "session_type",
            postgresql.ENUM(
                "REGISTER", "LOGIN", "VERIFICATION", name="otp_session_type_enum"
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING", "VERIFIED", "EXPIRED", "FAILED", name="otp_status_enum"
            ),
            nullable=False,
        ),
        sa.Column("attempts", sa.Integer(), nullable=False),
        sa.Column("max_attempts", sa.Integer(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("verified_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_otp_sessions_phone_expires",
        "otp_sessions",
        ["phone_number", "expires_at"],
        unique=False,
    )
    op.create_table(
        "system_config",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("config_key", sa.String(), nullable=False),
        sa.Column("config_value", sa.Text(), nullable=True),
        sa.Column(
            "config_type",
            postgresql.ENUM(
                "STRING", "NUMBER", "BOOLEAN", "JSON", name="config_type_enum"
            ),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("config_key"),
    )
    op.create_table(
        "user_profiles",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_active_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.Column("phone_verified", sa.Boolean(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "role",
            postgresql.ENUM("USER", "ADMIN", name="user_role_enum"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("phone_number"),
    )
    op.create_index(
        "idx_user_profiles_phone", "user_profiles", ["phone_number"], unique=False
    )
    op.create_table(
        "weekly_analytics",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("week_start_date", sa.Date(), nullable=False),
        sa.Column(
            "resource_type",
            postgresql.ENUM(
                "CHUNK",
                "DOCUMENT",
                "MESSAGE",
                "CONVERSATION",
                "MEDITATION",
                "CONTEMPLATION_CARD",
                name="analytics_resource_type_enum",
            ),
            nullable=False,
        ),
        sa.Column("resource_id", sa.UUID(), nullable=False),
        sa.Column("hit_count", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "week_start_date",
            "resource_type",
            "resource_id",
            name="unique_weekly_analytics",
        ),
    )
    op.create_index(
        "idx_weekly_analytics_week_type",
        "weekly_analytics",
        ["week_start_date", "resource_type"],
        unique=False,
    )
    op.create_table(
        "activity_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("action", sa.String(), nullable=False),
        sa.Column("resource_type", sa.String(), nullable=False),
        sa.Column("resource_id", sa.UUID(), nullable=True),
        sa.Column("details", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user_profiles.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_activity_logs_user_created",
        "activity_logs",
        ["user_id", "created_at"],
        unique=False,
    )
    op.create_table(
        "conversations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["user_profiles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "source_documents",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("filename", sa.String(), nullable=False),
        sa.Column("file_size_bytes", sa.BigInteger(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PROCESSING", "COMPLETED", "FAILED", name="document_status_enum"
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user_profiles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_source_documents_active",
        "source_documents",
        ["active", "status"],
        unique=False,
    )
    op.create_table(
        "document_chunks",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("source_document_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column(
            "embedding", pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True
        ),
        sa.Column("loc", sa.Text(), nullable=True),
        sa.Column("model_used", sa.String(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_document_id"], ["source_documents.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "messages",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("USER", "ASSISTANT", name="message_role_enum"),
            nullable=False,
        ),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column(
            "citations",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "feedback_type",
            postgresql.ENUM("POSITIVE", "NEGATIVE", name="feedback_type_enum"),
            nullable=True,
        ),
        sa.Column("feedback_given_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("token_count", sa.Integer(), nullable=True),
        sa.Column("processing_time_ms", sa.Integer(), nullable=True),
        sa.Column("model_used", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"], ["conversations.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "contemplation_cards",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("conversation_id", sa.UUID(), nullable=True),
        sa.Column("message_id", sa.UUID(), nullable=True),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("theme", sa.String(), nullable=False),
        sa.Column("content_path", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"], ["conversations.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["message_id"], ["messages.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["user_id"], ["user_profiles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_contemplation_cards_user_created",
        "contemplation_cards",
        ["user_id", "created_at"],
        unique=False,
    )
    op.create_table(
        "meditations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("conversation_id", sa.UUID(), nullable=True),
        sa.Column("message_id", sa.UUID(), nullable=True),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("duration_seconds", sa.Integer(), nullable=False),
        sa.Column(
            "mode",
            postgresql.ENUM("VIDEO", "AUDIO", name="meditation_mode_enum"),
            nullable=False,
        ),
        sa.Column("voice_id", sa.String(), nullable=False),
        sa.Column("transcript", sa.Text(), nullable=False),
        sa.Column("content_path", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"], ["conversations.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["message_id"], ["messages.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["user_id"], ["user_profiles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_meditations_user_created",
        "meditations",
        ["user_id", "created_at"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_meditations_user_created", table_name="meditations")
    op.drop_table("meditations")
    op.drop_index(
        "idx_contemplation_cards_user_created", table_name="contemplation_cards"
    )
    op.drop_table("contemplation_cards")
    op.drop_table("messages")
    op.drop_table("document_chunks")
    op.drop_index("idx_source_documents_active", table_name="source_documents")
    op.drop_table("source_documents")
    op.drop_table("conversations")
    op.drop_index("idx_activity_logs_user_created", table_name="activity_logs")
    op.drop_table("activity_logs")
    op.drop_index("idx_weekly_analytics_week_type", table_name="weekly_analytics")
    op.drop_table("weekly_analytics")
    op.drop_index("idx_user_profiles_phone", table_name="user_profiles")
    op.drop_table("user_profiles")
    op.drop_table("system_config")
    op.drop_index("idx_otp_sessions_phone_expires", table_name="otp_sessions")
    op.drop_table("otp_sessions")
    # ### end Alembic commands ###
