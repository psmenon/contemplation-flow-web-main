"""remove blacklist token idea and have a flag for signed in or not

Revision ID: 158fd9e1573a
Revises: e6fb5e0a0c35
Create Date: 2025-07-07 19:51:41.798350

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "158fd9e1573a"
down_revision: Union[str, Sequence[str], None] = "e6fb5e0a0c35"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("idx_blacklisted_tokens_expires_at"), table_name="blacklisted_tokens"
    )
    op.drop_index(op.f("idx_blacklisted_tokens_token"), table_name="blacklisted_tokens")
    op.drop_index(
        op.f("idx_blacklisted_tokens_user_id"), table_name="blacklisted_tokens"
    )
    op.drop_table("blacklisted_tokens")
    op.add_column(
        "user_profiles", sa.Column("is_signed_in", sa.Boolean(), nullable=True)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("user_profiles", "is_signed_in")
    op.create_table(
        "blacklisted_tokens",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("token", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("token_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "blacklisted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "expires_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user_profiles.id"],
            name=op.f("blacklisted_tokens_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("blacklisted_tokens_pkey")),
        sa.UniqueConstraint(
            "token",
            name=op.f("blacklisted_tokens_token_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f("idx_blacklisted_tokens_user_id"),
        "blacklisted_tokens",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        op.f("idx_blacklisted_tokens_token"),
        "blacklisted_tokens",
        ["token"],
        unique=False,
    )
    op.create_index(
        op.f("idx_blacklisted_tokens_expires_at"),
        "blacklisted_tokens",
        ["expires_at"],
        unique=False,
    )
    # ### end Alembic commands ###
